/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package face.system;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.videoio.VideoCapture;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
/**
 *
 * @author sharif
 */
public class FaceSystem extends javax.swing.JFrame {
///////
    private DaemonThread myThread = null;
    //int count = 0;
    VideoCapture webSource = new VideoCapture(0);// video capture from default cam
    Mat frame = new Mat();
    MatOfByte mem = new MatOfByte();
    String caraHaarcascades = "C:\\Users\\sharif\\Desktop\\Face System\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalface_alt2.xml";
    CascadeClassifier faceDetector = new CascadeClassifier(caraHaarcascades);
    MatOfRect rostros = new MatOfRect();
    Mat frame_gray = new Mat();
    Rect[] facesArray;//[][][][][]            
    Graphics g;
    BufferedImage buff = null;
    // private boolean runnable;
///////  
    class DaemonThread implements Runnable {
        protected volatile boolean runnable = false;
        
        public void run() {
            synchronized (this) {
                while (true) {
                    if (webSource.read(frame)) {
                        CamLivePanelFeed();
                    }
                }
            }
        }
    }

    private void CamLivePanelFeed() {
        try {
            g = CamSystemLabel1.getGraphics();
            Imgproc.cvtColor(frame, frame_gray, Imgproc.COLOR_BGR2GRAY);
            Imgproc.equalizeHist(frame_gray, frame_gray);
            faceDetector.detectMultiScale(frame, rostros);
            // faceDetector.detectMultiScale(frame_gray,
            //       rostros,
            //       3.1,2,
            //       CASCADE_SCALE_IMAGE,
            //       new Size(30, 30),
            //       new Size(frame.width(), frame.height()));
            facesArray = rostros.toArray();
            //    System.out.println("FACES FOUND: " + facesArray.length);// AMOUNT OF FACES FOUND
            Mat faceROI = new Mat();
            // g.setColor(Color.red);
            for (Rect rect : rostros.toArray()) {
                /* DETECTS AND DRAWS AN ELLIPSE TO WHAT CORRESPONDS THE FACE */
                Imgproc.rectangle(frame,
                        new Point(rect.x, rect.y),
                        new Point(rect.x + rect.width, rect.y + rect.height),
                        new Scalar(0, 255, 0), (int) 1.5);
                faceROI = frame_gray.submat(rect);
                
            }
            Imgcodecs.imencode(".png", frame, mem);
            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
            buff = (BufferedImage) im;
            g.drawImage(buff,
                    0, 0,
                    CamSystemLabel1.getWidth(),
                    CamSystemLabel1.getHeight(),
                    0, 0, buff.getWidth(),
                    buff.getHeight(), null);
        } catch (IOException ex) {
            Logger.getLogger(FaceSystem.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error!!");
            ex.printStackTrace();
        }
    }
/////////
    public FaceSystem() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CamSystemPanel1 = new javax.swing.JPanel();
        CamSystemLabel1 = new javax.swing.JLabel();
        SystemCaptureButton = new javax.swing.JButton();
        SystemStopButton = new javax.swing.JButton();
        SystemSnapButton = new javax.swing.JButton();
        SystemUploadButton = new javax.swing.JButton();
        SystemFaceButton = new javax.swing.JButton();
        SystemExitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName(""); // NOI18N
        setResizable(false);

        CamSystemPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout CamSystemPanel1Layout = new javax.swing.GroupLayout(CamSystemPanel1);
        CamSystemPanel1.setLayout(CamSystemPanel1Layout);
        CamSystemPanel1Layout.setHorizontalGroup(
            CamSystemPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CamSystemLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CamSystemPanel1Layout.setVerticalGroup(
            CamSystemPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CamSystemLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
        );

        SystemCaptureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/record-15.png"))); // NOI18N
        SystemCaptureButton.setText("Capture");
        SystemCaptureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemCaptureButtonActionPerformed(evt);
            }
        });

        SystemStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/stop-15.png"))); // NOI18N
        SystemStopButton.setText("Stop");
        SystemStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemStopButtonActionPerformed(evt);
            }
        });

        SystemSnapButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/save-all-15.png"))); // NOI18N
        SystemSnapButton.setText("Snap");
        SystemSnapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemSnapButtonActionPerformed(evt);
            }
        });

        SystemUploadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/updates-15.png"))); // NOI18N
        SystemUploadButton.setText("Upload");
        SystemUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemUploadButtonActionPerformed(evt);
            }
        });

        SystemFaceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/face recognition-15.png"))); // NOI18N
        SystemFaceButton.setText("Face Recognition");
        SystemFaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemFaceButtonActionPerformed(evt);
            }
        });

        SystemExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/face/system/Icon/delete-15.png"))); // NOI18N
        SystemExitButton.setText("Exit");
        SystemExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemExitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CamSystemPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(SystemCaptureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(SystemStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SystemSnapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SystemUploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(SystemFaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addComponent(SystemExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CamSystemPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SystemCaptureButton)
                    .addComponent(SystemSnapButton)
                    .addComponent(SystemStopButton)
                    .addComponent(SystemFaceButton)
                    .addComponent(SystemUploadButton)
                    .addComponent(SystemExitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SystemCaptureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemCaptureButtonActionPerformed
        myThread = new DaemonThread(); //create object of threat class
        Thread t = new Thread(myThread);
        myThread.runnable = true;
        t.start();
        SystemCaptureButton.setEnabled(false);  // deactivate start button
        SystemStopButton.setEnabled(true);  //  activate stop button
    }//GEN-LAST:event_SystemCaptureButtonActionPerformed

    private void SystemStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemStopButtonActionPerformed
        myThread.runnable = false;            // stop thread
        webSource.release();  // stop caturing fron cam
        SystemStopButton.setEnabled(false);   // activate start button 
        SystemCaptureButton.setEnabled(true);     // deactivate stop button
    }//GEN-LAST:event_SystemStopButtonActionPerformed

    private void SystemExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SystemExitButtonActionPerformed

    private void SystemSnapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemSnapButtonActionPerformed
        myThread = new DaemonThread(); //create object of threat class
        Thread t = new Thread(myThread);
        myThread.runnable = true;
        t.start();
        String filename = "faceDetection.png";
        System.out.println(String.format("Writing %s", filename));
        Mat faceROI = null;
        Imgcodecs.imwrite(filename, faceROI);
    }//GEN-LAST:event_SystemSnapButtonActionPerformed

    private void SystemUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemUploadButtonActionPerformed
        
    }//GEN-LAST:event_SystemUploadButtonActionPerformed

    private void SystemFaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemFaceButtonActionPerformed
       
    }//GEN-LAST:event_SystemFaceButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FaceSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FaceSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FaceSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FaceSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FaceSystem Frame = new FaceSystem();
                Frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                Frame.setLocationRelativeTo(null);//to make the frame in screen center
                Frame.setVisible(true); // to make the frame visible
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CamSystemLabel1;
    private javax.swing.JPanel CamSystemPanel1;
    private javax.swing.JButton SystemCaptureButton;
    private javax.swing.JButton SystemExitButton;
    private javax.swing.JButton SystemFaceButton;
    private javax.swing.JButton SystemSnapButton;
    private javax.swing.JButton SystemStopButton;
    private javax.swing.JButton SystemUploadButton;
    // End of variables declaration//GEN-END:variables
}

